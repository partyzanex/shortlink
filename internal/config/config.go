// Package config
// Code generated by cli-config-gen (https://github.com/partyzanex/cli-config-gen). DO NOT EDIT.
// source: ./app/config.yaml
package config

import (
	"fmt"
	"time"

	. "github.com/partyzanex/cli-config-gen"
	"github.com/urfave/cli/v2"
)

// Description
const (
	AppName = "shortlink"
	AppDesc = "Service for creating short links"
)

// Environment names.
const (
	EnvLocal EnvName = "local"
	EnvDev   EnvName = "dev"
	EnvProd  EnvName = "prod"
)

// Flag names.
const (
	EnvFlagName                  = "env"
	AdminAssetsPathFlagName      = "admin-assets-path"
	AdminBaseUrlFlagName         = "admin-base-url"
	AdminHttpHostFlagName        = "admin-http-host"
	AdminHttpPortFlagName        = "admin-http-port"
	AdminViewPathFlagName        = "admin-view-path"
	DebugHostFlagName            = "debug-host"
	GrpcHostFlagName             = "grpc-host"
	GrpcReflectionFlagName       = "grpc-reflection"
	HashLengthFlagName           = "hash-length"
	HttpHostFlagName             = "http-host"
	LogLevelFlagName             = "log-level"
	PostgresReadTimeoutFlagName  = "postgres-read-timeout"
	PostgresUrlFlagName          = "postgres-url"
	PostgresWriteTimeoutFlagName = "postgres-write-timeout"
)

// LogLevel enums
const (
	LogLevelDebug   = "debug"
	LogLevelInfo    = "info"
	LogLevelWarning = "warning"
	LogLevelError   = "error"
	LogLevelFatal   = "fatal"
	LogLevelPanic   = "panic"
)

// Env should be setup the default environment name.
var Env = GetEnvName("SHORTLINK_ENV", EnvLocal, EnvDev, EnvProd)

// Flag values
var (
	// AdminAssetsPath contains default environments values.
	AdminAssetsPath = NewValue(Env).
			Set(EnvLocal, "./internal/admin/assets").
			Set(EnvDev, "./internal/admin/assets").
			Set(EnvProd, "./internal/admin/assets")

	// AdminBaseUrl contains default environments values.
	AdminBaseUrl = NewValue(Env).
			Set(EnvLocal, "/admin").
			Set(EnvDev, "/admin").
			Set(EnvProd, "/admin")

	// AdminHttpHost contains default environments values.
	AdminHttpHost = NewValue(Env).
			Set(EnvLocal, "0.0.0.0").
			Set(EnvDev, "0.0.0.0").
			Set(EnvProd, "0.0.0.0")

	// AdminHttpPort contains default environments values.
	AdminHttpPort = NewValue(Env).
			Set(EnvLocal, uint(9900)).
			Set(EnvDev, uint(9900)).
			Set(EnvProd, uint(9900))

	// AdminViewPath contains default environments values.
	AdminViewPath = NewValue(Env).
			Set(EnvLocal, "./internal/admin/views").
			Set(EnvDev, "./internal/admin/views").
			Set(EnvProd, "./internal/admin/views")

	// DebugHost contains default environments values.
	DebugHost = NewValue(Env).
			Set(EnvLocal, "0.0.0.0:8084").
			Set(EnvDev, "0.0.0.0:84").
			Set(EnvProd, "0.0.0.0:84")

	// GrpcHost contains default environments values.
	GrpcHost = NewValue(Env).
			Set(EnvLocal, "0.0.0.0:8082").
			Set(EnvDev, "0.0.0.0:82").
			Set(EnvProd, "0.0.0.0:82")

	// GrpcReflection contains default environments values.
	GrpcReflection = NewValue(Env).
			Set(EnvLocal, true).
			Set(EnvDev, true).
			Set(EnvProd, false)

	// HashLength contains default environments values.
	HashLength = NewValue(Env).
			Set(EnvLocal, int(3)).
			Set(EnvDev, int(3)).
			Set(EnvProd, int(3))

	// HttpHost contains default environments values.
	HttpHost = NewValue(Env).
			Set(EnvLocal, "0.0.0.0:8080").
			Set(EnvDev, "0.0.0.0:80").
			Set(EnvProd, "0.0.0.0:80")

	// LogLevel contains default environments values.
	LogLevel = NewValue(Env).
			Set(EnvLocal, LogLevelDebug).
			Set(EnvDev, LogLevelDebug).
			Set(EnvProd, LogLevelInfo)

	// PostgresReadTimeout contains default environments values.
	PostgresReadTimeout = NewValue(Env).
				SetDuration(EnvLocal, time.Duration(3000000000)).
				SetDuration(EnvDev, time.Duration(3000000000)).
				SetDuration(EnvProd, time.Duration(3000000000))

	// PostgresUrl contains default environments values.
	PostgresUrl = NewValue(Env).
			Set(EnvLocal, "postgresql://postgres:postgres@localhost:5432/short?sslmode=disable").
			Set(EnvDev, "").
			Set(EnvProd, "")

	// PostgresWriteTimeout contains default environments values.
	PostgresWriteTimeout = NewValue(Env).
				SetDuration(EnvLocal, time.Duration(3000000000)).
				SetDuration(EnvDev, time.Duration(3000000000)).
				SetDuration(EnvProd, time.Duration(3000000000))
)

// EnvFlag returns *cli.StringFlag for --env flag.
func EnvFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:        EnvFlagName,
		Category:    "",
		DefaultText: "",
		FilePath:    "",
		Usage:       "Environment name",
		Required:    false,
		Hidden:      false,
		HasBeenSet:  false,
		Value:       Env.String(),
		Destination: nil,
		Aliases:     nil,
		EnvVars:     []string{"SHORTLINK_ENV"},
		TakesFile:   false,
		Action: func(_ *cli.Context, s string) error {
			env := EnvName(s)

			switch env {
			case EnvLocal:
			case EnvDev:
			case EnvProd:
			default:
				return fmt.Errorf("invalid environment name %q", s)
			}

			Env = env

			return nil
		},
	}
}

// AdminAssetsPathFlag returns a *cli.StringFlag for --admin-assets-path flag.
func AdminAssetsPathFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     AdminAssetsPathFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    AdminAssetsPath.String(),
		EnvVars:  nil,
		Action: func(_ *cli.Context, v string) error {
			AdminAssetsPath.Set(Env, v)

			return nil
		},
	}
}

// AdminBaseUrlFlag returns a *cli.StringFlag for --admin-base-url flag.
func AdminBaseUrlFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     AdminBaseUrlFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    AdminBaseUrl.String(),
		EnvVars:  []string{"SHORTLINK_ADMIN_BASE_URL"},
		Action: func(_ *cli.Context, v string) error {
			AdminBaseUrl.Set(Env, v)

			return nil
		},
	}
}

// AdminHttpHostFlag returns a *cli.StringFlag for --admin-http-host flag.
func AdminHttpHostFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     AdminHttpHostFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    AdminHttpHost.String(),
		EnvVars:  []string{"SHORTLINK_ADMIN_HTTP_HOST"},
		Action: func(_ *cli.Context, v string) error {
			AdminHttpHost.Set(Env, v)

			return nil
		},
	}
}

// AdminHttpPortFlag returns a *cli.UintFlag for --admin-http-port flag.
func AdminHttpPortFlag() *cli.UintFlag {
	return &cli.UintFlag{
		Name:     AdminHttpPortFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    AdminHttpPort.Uint(),
		EnvVars:  []string{"SHORTLINK_ADMIN_HTTP_PORT"},
		Action: func(_ *cli.Context, v uint) error {
			AdminHttpPort.Set(Env, v)

			return nil
		},
	}
}

// AdminViewPathFlag returns a *cli.StringFlag for --admin-view-path flag.
func AdminViewPathFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     AdminViewPathFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    AdminViewPath.String(),
		EnvVars:  nil,
		Action: func(_ *cli.Context, v string) error {
			AdminViewPath.Set(Env, v)

			return nil
		},
	}
}

// DebugHostFlag returns a *cli.StringFlag for --debug-host flag.
func DebugHostFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     DebugHostFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    DebugHost.String(),
		EnvVars:  []string{"SHORTLINK_DEBUG_HOST"},
		Action: func(_ *cli.Context, v string) error {
			DebugHost.Set(Env, v)

			return nil
		},
	}
}

// GrpcHostFlag returns a *cli.StringFlag for --grpc-host flag.
func GrpcHostFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     GrpcHostFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    GrpcHost.String(),
		EnvVars:  []string{"SHORTLINK_GRPC_HOST"},
		Action: func(_ *cli.Context, v string) error {
			GrpcHost.Set(Env, v)

			return nil
		},
	}
}

// GrpcReflectionFlag returns a *cli.BoolFlag for --grpc-reflection flag.
func GrpcReflectionFlag() *cli.BoolFlag {
	return &cli.BoolFlag{
		Name:     GrpcReflectionFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    GrpcReflection.Bool(),
		EnvVars:  []string{"SHORTLINK_GRPC_REFLECTION"},
		Action: func(_ *cli.Context, v bool) error {
			GrpcReflection.Set(Env, v)

			return nil
		},
	}
}

// HashLengthFlag returns a *cli.IntFlag for --hash-length flag.
func HashLengthFlag() *cli.IntFlag {
	return &cli.IntFlag{
		Name:     HashLengthFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    HashLength.Int(),
		EnvVars:  []string{"SHORTLINK_HASH_LENGTH"},
		Action: func(_ *cli.Context, v int) error {
			HashLength.Set(Env, v)

			return nil
		},
	}
}

// HttpHostFlag returns a *cli.StringFlag for --http-host flag.
func HttpHostFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     HttpHostFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    HttpHost.String(),
		EnvVars:  []string{"SHORTLINK_HTTP_HOST"},
		Action: func(_ *cli.Context, v string) error {
			HttpHost.Set(Env, v)

			return nil
		},
	}
}

// LogLevelFlag returns a *cli.StringFlag for --log-level flag.
func LogLevelFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     LogLevelFlagName,
		Aliases:  nil,
		Usage:    "variants: debug, info, warning, error, fatal, panic",
		Required: false,
		Value:    LogLevel.String(),
		EnvVars:  []string{"SHORTLINK_LOG_LEVEL"},
		Action: func(_ *cli.Context, v string) error {
			LogLevel.Set(Env, v)

			return nil
		},
	}
}

// PostgresReadTimeoutFlag returns a *cli.DurationFlag for --postgres-read-timeout flag.
func PostgresReadTimeoutFlag() *cli.DurationFlag {
	return &cli.DurationFlag{
		Name:     PostgresReadTimeoutFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    PostgresReadTimeout.Duration(),
		EnvVars:  []string{"SHORTLINK_POSTGRES_READ_TIMEOUT"},
		Action: func(_ *cli.Context, v time.Duration) error {
			PostgresReadTimeout.SetDuration(Env, v)

			return nil
		},
	}
}

// PostgresUrlFlag returns a *cli.StringFlag for --postgres-url flag.
func PostgresUrlFlag() *cli.StringFlag {
	return &cli.StringFlag{
		Name:     PostgresUrlFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    PostgresUrl.String(),
		EnvVars:  []string{"SHORTLINK_POSTGRES_URL"},
		Action: func(_ *cli.Context, v string) error {
			PostgresUrl.Set(Env, v)

			return nil
		},
	}
}

// PostgresWriteTimeoutFlag returns a *cli.DurationFlag for --postgres-write-timeout flag.
func PostgresWriteTimeoutFlag() *cli.DurationFlag {
	return &cli.DurationFlag{
		Name:     PostgresWriteTimeoutFlagName,
		Aliases:  nil,
		Usage:    "",
		Required: false,
		Value:    PostgresWriteTimeout.Duration(),
		EnvVars:  []string{"SHORTLINK_POSTGRES_WRITE_TIMEOUT"},
		Action: func(_ *cli.Context, v time.Duration) error {
			PostgresWriteTimeout.SetDuration(Env, v)

			return nil
		},
	}
}

func CLIFlags() []cli.Flag {
	return []cli.Flag{
		EnvFlag(),
		AdminAssetsPathFlag(),
		AdminBaseUrlFlag(),
		AdminHttpHostFlag(),
		AdminHttpPortFlag(),
		AdminViewPathFlag(),
		DebugHostFlag(),
		GrpcHostFlag(),
		GrpcReflectionFlag(),
		HashLengthFlag(),
		HttpHostFlag(),
		LogLevelFlag(),
		PostgresReadTimeoutFlag(),
		PostgresUrlFlag(),
		PostgresWriteTimeoutFlag(),
	}
}
